plugins {
    id "java"
    id "eclipse"
}

def getDate() {
	return (new Date()).format("MM-dd-yyyy HH:mm:ss")
}

sourceCompatibility = 1.8
group = "firebirdcss.com"
version = "1.0.0"

repositories {
	mavenCentral()
}

sourceSets {
    main {
        java.srcDirs "src/main/java"
	    resources.srcDirs "src/main/resources"
    }

    test {
		java.srcDir "src/test/java"
    }
}

dependencies {
	compile "org.slf4j:slf4j-log4j12:1.7.22"
	compile "org.apache.kafka:kafka-clients:0.10.1.0"
	testCompile "junit:junit:4.11"
}



/**
 * Task to build the kafka-consumer.jar
 */
task buildConsumer(type: Jar, dependsOn: classes) {
	archiveName = "kafka-consumer.jar"
	manifest {
        attributes "Implementation-Title": "KafkaFun",
            "Implementation-Version": version,
            "Implementation-Vendor": "Firebird CSS",
            "Build-Date": getDate(),
            "Main-Class": "com.firebirdcss.sandbox.kafka.kafka_fun.consumer.KafkaReader"
    }
    from (sourceSets.main.output) {
		include "com/firebirdcss/sandbox/kafka/kafka_fun/consumer/**"
	}
}

/** 
 * Task to build the kafka-producer.jar
 */
task buildProducer(type: Jar, dependsOn: classes) {
	archiveName = "kafka-producer.jar"
	manifest {
        attributes "Implementation-Title": "KafkaFun",
            "Implementation-Version": version,
            "Implementation-Vendor": "Firebird CSS",
            "Build-Date": getDate(),
            "Main-Class": "com.firebirdcss.sandbox.kafka.kafka_fun.producer.KafkaSender"
    }
	from (sourceSets.main.output) {
		include "com/firebirdcss/sandbox/kafka/kafka_fun/producer/**"
	}
}

